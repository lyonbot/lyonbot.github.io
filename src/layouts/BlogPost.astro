---
import type { CollectionEntry } from "astro:content";

import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { title, description, ogImage, publishDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = publishDate.toISOString();
const { headings } = await post.render();
const headingMinDepth = headings.reduce((p, c) => Math.min(p, c.depth), 1000);
---

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		<aside class="sticky top-20 order-2 -me-32 hidden basis-64 lg:block">
			<div id="aside-container"></div>
			{
				!!headings.length && (
					<h2 class="font-semibold">Table of Contents</h2>
					<ul class="mt-4 text-xs">
						{headings.map(({ depth, slug, text }) => (
							<li class="line-clamp-2 hover:text-accent">
								<a
									class={`block mt-2 text-xs`}
									style={`padding-left: ${(depth - headingMinDepth) * 2}ex`}
									href={`#${slug}`}
									data-prose-heading-id={slug}
									aria-label={`Scroll to section: ${text}`}
								>
									{text}
								</a>
							</li>
						))}
					</ul>
					)
			}
		</aside>
		<article class="flex-grow break-words">
			<div id="blog-hero"><BlogHero content={post} /></div>
			<div
				class="prose prose-cactus mt-12 headings:font-semibold prose-th:before:content-none"
			>
				<slot />
			</div>
		</article>
		<script>
			document.querySelectorAll('a[data-prose-heading-id]').forEach(function(link){
				var id = link.getAttribute('data-prose-heading-id')
				var h = document.getElementById(id)
				if (!h) return;

				var hash = document.createElement('a')
				hash.setAttribute('href', '#' + id)
				hash.setAttribute('class', 'absolute bg-none no-underline ms-[-1.5ex] text-right text-accent')
				hash.textContent = '#'
				h.insertBefore(hash, h.firstChild)
			})

			document.querySelectorAll('.prose aside').forEach(function(el) {
				document.getElementById('aside-container').appendChild(el)
				el.classList.add('mb-4')
			})
		</script>
		<script>
			import "viewerjs/dist/viewer.css"
			import Viewer from 'viewerjs';

			new Viewer(document.querySelector('.prose'));
		</script>
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
</BaseLayout>
